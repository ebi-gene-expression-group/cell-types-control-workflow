profiles {

    standard {
        process.executor = 'local'
    }

    cluster{
        process.executor='lsf'
        process.queue='production-rh74'
        process.clusterOptions = '-R \"select[hname!=\'hx-noah-05-02\']\"'

        executor.queueSize=1000
        executor.perJobMemLimit=false
        executor.exitReadTimeout='100000 sec'
        executor.pollInterval = '5sec'

        //conda.cacheDir = "${baseDir}/envs" // TODO: sort out this path 
        conda.createTimeout = "30 min"
    } 
}

params {
	profile = "cluster"
	tool_outputs_dir ="${baseDir}/data/tools_outputs"
	label_analysis_outdir ="${baseDir}/data/tools_outputs"
 	
	input_data ="data/CV_test_data"
  	data_import {
                run = "False"
                training_datasets="${baseDir}/data/datasets.txt"
                scxa_import_config_file="${baseDir}/data/scxa_import_config.yaml"
                get_sdrf = "TRUE"
                get_cond_sdrf = "TRUE"
                get_idf = "TRUE"
                get_marker_genes = "TRUE"
    		unmelt_sdrf{
			run = "True"
	                retain_types = "TRUE"

		}
	}
 
	// contol field names in metadata file 
	metadata{
		query_barcode_col_name = "id" // cell id column 
		query_label_col_name = "Factor.inferred.cell.type." // query label column 
		query_CL_col_name = "Factor.inferred.cell.type..ontology" // cell ontology column
		
		ref_barcode_col_name = "id" // cell id column 
		ref_label_col_name = "Factor.inferred.cell.type." // reference label column 
		ref_CL_col_name = "Factor.inferred.cell.type..ontology" // cell ontology column 
	}
    
	scpred{
		run = "True" // must be 'True' or 'False'
		matrix_type = "CPM" // must be either "raw", "filtered", "TPM" or "CPM" (NB: TPM is only relevant for smart-seq based  experiments; CPM matrices will be downloaded for droplet-based experiments by default)
		results_dir = "" // specify output when in nested workflow
		method = "prediction" //must be 'evaluation' or 'prediction'
		training_10x_dir = ""
		prediction_10x_dir = ""
		metadata_file = ""
		
		eigenvalue_plot_path = 'eigenvalue_plot.png'
		train_probs_plot_path = 'train_probs.png'
		prediction_probs_path = 'prediction_probs.png'
		model_predictions_path = 'model_predictions.txt'
		confusion_table_path = 'confusion_table.txt'
		normalised_counts_slot = 'counts'
		cell_id_col_name = ""
		cell_types_col_name = ""
		col_names = "TRUE"
		log_transform = "TRUE"
		model = 'svmRadialWeights' 
}

	scmap_cluster {
		run = "True" // must be 'True' or 'False'
		matrix_type = "TPM" // must be either "raw", "filtered", "TPM" or "CPM"
		results_dir = "" // specify output when in nested workflow
		projection_method = "cluster" //must be 'cell' or 'cluster'
		query_10x_dir = ""
		reference_10x_dir = ""
		reference_metadata = ""
		output_dir_cluster = "$baseDir/data/scmap_cluster/output_cluster"   
		col_names = "TRUE"
		cell_id_col = ""
		cluster_col = ""
		plot_file = "feature_plot_file.png"
		threshold = 0.1
	}

	scmap_cell{
		run = "True" // must be 'True' or 'False'
		matrix_type = "TPM" // must be either "raw", "filtered", "TPM" or "CPM"
		results_dir = "" // specify output when in nested workflow
		projection_method = "cell" //must be 'cell' or 'cluster'
		query_10x_dir = ""
		reference_10x_dir = ""
		reference_metadata = ""
		output_dir_cell = "$baseDir/data/scmap_cell/output_cell"   
		col_names = "TRUE"
		cell_id_col = ""
		cluster_col = ""
		plot_file = "feature_plot_file.png"
		threshold = 0.1
	}	

	garnett {
		run = "True" // must be 'True' or 'False'
		matrix_type = "TPM" // must be either "raw", "filtered", "TPM" or "CPM"
		results_dir = "" // specify output when in nested workflow
		ref_10x_dir = ""
		query_10x_dir = ""
		ref_cds_gene_id_type = "ENSEMBL"
		query_cds_gene_id_type = "ENSEMBL"
		marker_genes = ""
		pval_col = "pvals"
		groups_col = "cluster"
		gene_names = "genes"
		
		database = "org.Hs.eg.db"
		marker_gene_id_type = "ENSEMBL"
		classifier_gene_type = "ENSEMBL"
		n_outgroups=50
		cell_id_field = "null"
		predicted_cell_type_field = "cluster_ext_type"
	}

	label_analysis{
		run = "True" // must be 'True' or 'False'
		output_dir = "$baseDir/data/label_analysis_output" //output for outer workflow
		input_dir= ""
		condensed_sdrf= "FALSE"
		parallel= "TRUE"
		ontology_dict= "cell_ontology.rds"
		ontology_graph= "$baseDir/cl-basic.obo"
		tool_perf_table= "tool_perf_table.tsv"
		cell_anno_table= "cell_anno_table.tsv"
		tool_table_pvals= "tool_perf_pvals.tsv"
		ref_labels_file= "$baseDir/data/test/metadata.tsv"
		empirical_dist= "empirical_dist.rds"
		cell_ontology_col= "Factor.cell.type..ontology" //
		barcode_col_ref= "id"
		barcode_col_pred= "cell_id"
		label_column_ref= "Characteristic.cell.type." //
		label_column_pred= "predicted_label"
		num_iter=5 
		num_cores=1 
		semantic_sim_metric = "edge_resnik"
	}
}

env { 
	CONTROL_WORKFLOW_ROOT = "${baseDir}"
	CONTROL_WORKFLOW_BRANCH = 'origin/develop'
	
	EVAL_WORKFLOWS = "${baseDir}/cell-types-eval-workflows"
	
	//WORK_DIR = "$PWD/work"
	CONTROL_CONFIG = "${baseDir}/nextflow.config"
}
